(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{25:function(e,t,n){e.exports=n.p+"static/media/photo_other.1969756e.jpg"},34:function(e,t,n){e.exports=n(65)},45:function(e,t,n){},47:function(e,t,n){},49:function(e,t,n){},51:function(e,t,n){},53:function(e,t,n){e.exports=n.p+"static/media/photo.1fa99390.jpg"},54:function(e,t,n){},56:function(e,t,n){},58:function(e,t,n){},60:function(e,t,n){},62:function(e,t,n){},65:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),r=n(11),s=n.n(r),i=n(2),c=n(3),l=n(5),u=n(4),m=n(6),p=n(9),d=n(12),h=n(29),f=n(16);var v=Object(d.c)({signUp:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{status:0},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SIGNUP":return Object.assign({},e,{status:t.payload.status});default:return e}},login:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{status:0},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"LOGIN":return Object.assign({},e,{status:t.payload.status});default:return e}},currentSession:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{session:null,allFriend:[]},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"CURRENT_SESSION":return Object.assign({},e,{session:t.payload.session});case"FETCH_ALL_FRIEND":return Object.assign({},e,{allFriend:Object(f.a)(t.payload.allFriend)});default:return e}},message:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{msgList:{},currentMsg:[]},a=arguments.length>1?arguments[1]:void 0;switch(a.type){case"ADD_TEXT_MSG":return Object.assign({},n,{msgList:function(e,t,n){var a=n[e]||[];return a.push(t),n[e]=a,Object.assign({},n)}(a.payload.to,a.payload.message,n.msgList)});case"GET_ALONE_MSG":return Object.assign({},n,{currentMsg:(e=a.payload.to,t=n.msgList,t[e]?Object(f.a)(t[e]):[])});default:return n}}}),g=[h.a],b=d.a.apply(void 0,g)(d.d)(v),E=n(30),N=n.n(E)()(),y=new WebIM.connection({isMultiLoginSessions:WebIM.config.isMultiLoginSessions,https:!1,url:WebIM.config.xmppURL,heartBeatWait:WebIM.config.heartBeatWait,autoReconnectNumMax:WebIM.config.autoReconnectNumMax,autoReconnectInterval:WebIM.config.autoReconnectInterval,apiUrl:WebIM.config.apiURL,isHttpDNS:WebIM.config.isHttpDNS,isWindowSDK:WebIM.config.isWindowSDK,isAutoLogin:!0,encrypt:WebIM.config.encrypt,delivery:WebIM.config.delivery}),j=null,O=function(){return j},k=n(66);n(45);var w,M,C,S=(M={active:!0,errorHandler:function(e){alert(e.displayName+"----"+e.method)}},function(e){M.active&&["render","componentWillMount","componentDidMount","componentWillReceiveProps","componentWillUpdate","componentDidUpdate","compoentnWillUnmount","shouldComponentUpdate"].forEach(function(t){var n="shouldComponentUpdate"===t?function(){return!0}:function(){return null},a=e.prototype[t]||n;M.errorHandler=M.errorHandler||function(e){console.log(e)},e.prototype[t]=function(){try{return a.call(this,arguments)}catch(r){var o={displayName:e.name,method:t,message:r.stack,state:this.state,props:this.props};return M.errorHandler(o),n.call(this,arguments)}}})}(w=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={hint:{header:"",button:"",account:"",footer:"",aLink:"",showNickName:!1},userName:"",password:"",nickName:""},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;"signUp"===this.props.hint?this.setState({hint:{header:"\u6ce8\u518c",button:"\u6ce8\u518c",account:"\u5df2\u6709\u8d26\u6237",footer:"\u7acb\u5373\u767b\u5f55",aLink:"/login",showNickName:!0}}):this.setState({hint:{header:"\u767b\u5f55",button:"\u767b\u5f55",account:"\u6ca1\u6709\u8d26\u6237",footer:"\u7acb\u5373\u6ce8\u518c",aLink:"/signUp",showNickName:!1}}),this.changeInput=function(t){switch(t.target.name){case"userName":return e.setState({userName:t.target.value});case"password":return e.setState({password:t.target.value.trim()});case"nickName":return e.setState({nickName:t.target.value});default:return}},this.handleSubmit=function(t){t.preventDefault(),"signUp"===e.props.hint?e.props.handleSignUp(e.state):e.props.handleLogin(e.state)}}},{key:"render",value:function(){return o.a.createElement("div",{className:"signBasic"},o.a.createElement("header",null,o.a.createElement("div",{className:"header_inner"},o.a.createElement("h1",{className:"logo"},o.a.createElement("a",{href:"#"},"\u5f20\u6cbb\u56fd \u804a\u5929\u5c0f\u4f5c\u54c1")),o.a.createElement("div",{className:"signUpBtn"},o.a.createElement(k.a,{to:this.state.hint.aLink},this.state.hint.footer)))),o.a.createElement("main",null,o.a.createElement("div",{className:"main_inner"},o.a.createElement("form",null,o.a.createElement("h3",null,this.state.hint.header),o.a.createElement("div",{className:"row"},o.a.createElement("i",{className:"iconfont icon-photo"}),o.a.createElement("input",{type:"text",name:"userName",placeholder:"\u7528\u6237\u540d",className:"input",autoFocus:!0,value:this.state.userName,onChange:this.changeInput})),o.a.createElement("div",{className:"row"},o.a.createElement("i",{className:"iconfont icon-clock"}),o.a.createElement("input",{type:"password",name:"password",placeholder:"\u5bc6\u7801",className:"input",value:this.state.password,onChange:this.changeInput})),this.state.hint.showNickName?o.a.createElement("div",{className:"row"},o.a.createElement("i",{className:"iconfont icon-photo"}),o.a.createElement("input",{type:"nickName",name:"nickName",placeholder:"\u8f93\u5165\u6635\u79f0",className:"input",value:this.state.nickName,onChange:this.changeInput})):null,o.a.createElement("div",{className:"button_wrapper"},o.a.createElement("input",{type:"submit",name:"submit",className:"button",value:this.state.hint.button,onClick:this.handleSubmit}))))))}}]),t}(a.Component))||w),_=(n(47),function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props,t=e.type,n=e.content;return o.a.createElement("div",{className:"tooltips"},o.a.createElement("div",null,"".concat(t,": ").concat(n)))}}]),t}(a.Component));_.defaultProps={time:3e3,type:"success",content:""};var W=null;function U(){C&&(s.a.unmountComponentAtNode(C),C.parentNode.removeChild(C),C=null)}var I,L,T,R={show:function(e){C&&U(),C=document.createElement("div"),document.body.appendChild(C),s.a.render(o.a.createElement(_,e),C),W&&clearTimeout(W),W=setTimeout(function(){U()},e.time||3e3)},close:U},A=Object(p.b)(function(e){return{status:e.login.status}},{loginToServer:function(e){return function(t,n){return new Promise(function(t,n){e.success=function(e){t(e)},e.error=function(e){n(e)},sdk.conn.open(e)})}}})(I=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.handleLogin=function(t){if(t.userName&&t.password){var n={user:t.userName.trim(),pwd:t.password,appKey:WebIM.config.appkey,apiUrl:WebIM.config.apiURL};e.props.loginToServer(n).then(function(e){j=e,N.push("/chat")},function(e){R.show({type:"error",content:"\u767b\u5f55\u5931\u8d25\u4e86"})})}else R.show({type:"error",content:"\u8d26\u53f7\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a"})}}},{key:"render",value:function(){return o.a.createElement(S,{hint:"login",handleLogin:this.handleLogin,status:this.props.status})}}]),t}(a.Component))||I,D=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];return function(){for(var t=arguments.length,a=new Array(t),o=0;o<t;o++)a[o]=arguments[o];var r={type:e,payload:{}};return n.forEach(function(e,t){r.payload[n[t]]=a[t]}),r}},F=D("SIGNUP","status"),x=Object(p.b)(function(e){return{status:e.signUp.status}},{signUpToServer:function(e){return function(t,n){return new Promise(function(n,a){var o=e.success,r=e.error;e.success=function(){t(F(2)),o&&o(),n()},e.error=function(){t(F(3)),r&&r(),a()},sdk.conn.registerUser(e)})}}})(L=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.handleSignUp=function(t){if(t.userName&&t.password&&t.nickName){var n={username:t.userName.trim().toLowerCase(),password:t.password,nickname:t.nickName,appKey:WebIM.config.appkey,apiUrl:WebIM.config.apiURL};e.props.signUpToServer(n).then(function(){console.log("\u6ce8\u518c\u6210\u529f"),N.push("/login")},function(){console.log("\u6ce8\u518c\u5931\u8d25"),R.show({content:"\u6ce8\u518c\u5931\u8d25\u4e86",type:"error"})})}else R.show({type:"error",content:"\u8d26\u53f7\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a"})}}},{key:"render",value:function(){return o.a.createElement(S,{hint:"signUp",handleSignUp:this.handleSignUp,status:this.props.status})}}]),t}(a.Component))||L,P=n(13),H=n(14),B=n.n(H),G=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props.type,t=B()(Object(P.a)({iconfont:!0},"icon-"+e,!0));return o.a.createElement("span",{className:t})}}]),t}(a.Component),K=(n(49),function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.closeDialog=function(){J(),e.props.onClose&&e.props.onClose()}}},{key:"render",value:function(){var e=this.props,t=e.title,n=e.content,a=e.footer,r=e.showMask;return o.a.createElement("div",{className:"dlg_wrapper"},r?o.a.createElement("div",{className:"dlg_mask"}):null,o.a.createElement("div",{className:"dlg"},o.a.createElement("div",{className:"dlg_closeBtn",onClick:this.closeDialog},o.a.createElement(G,{type:"guanbi"})),o.a.createElement("div",{className:"dlg_header"},t),o.a.createElement("div",{className:"dlg_main"},n),o.a.createElement("div",{className:"dlg_footer"},a)))}}]),t}(a.Component));function J(){T&&(s.a.unmountComponentAtNode(T),T.parentNode.removeChild(T),T=null)}K.defaultProps={showMask:!0};var X={show:function(e){T&&J(),T&&J(),T=document.createElement("div"),document.body.appendChild(T),s.a.render(o.a.createElement(K,e),T)},close:J},q=(n(51),function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.showAddFriend=function(){X.show({title:"\u6dfb\u52a0\u597d\u53cb",content:o.a.createElement("div",{className:"sb_dlg_header_inner"},o.a.createElement("input",{type:"text",placeholder:"\u8f93\u5165\u540d\u5b57",ref:function(t){e.nickNameRef=t}})),footer:o.a.createElement("div",{className:"sb_dlg_footer_inner"},o.a.createElement("div",{className:"button",onClick:e.confirmAddFriend},"\u786e\u5b9a"))})},this.confirmAddFriend=function(){sdk.conn.subscribe({to:e.nickNameRef.value.trim(),message:"\u4f60\u597d\uff0c\u6211\u662f\u5f20\u6cbb\u56fd\uff0c\u4ea4\u4e2a\u670b\u53cb\u5457\uff01"}),X.close()}}},{key:"render",value:function(){var e=O(),t=e?e.user.username:"";return o.a.createElement("div",{className:"sb"},o.a.createElement("div",{className:"sb_header"},o.a.createElement("div",{className:"photo_wrapper avator"},o.a.createElement("img",{src:n(53),alt:""})),o.a.createElement("p",{className:"myNickName"},t)),o.a.createElement("div",{className:"sb_main"},o.a.createElement("div",{className:"icon_wrapper chat"},o.a.createElement("i",{className:"iconfont icon-chat"}))),o.a.createElement("div",{className:"sb_footer"},o.a.createElement("dir",{className:"icon_wrapper setting",onClick:this.showAddFriend},o.a.createElement("i",{className:"iconfont icon-shezhi"}))))}}]),t}(a.Component)),z=n(31),$=D("CURRENT_SESSION","session"),Q=D("FETCH_ALL_FRIEND","allFriend");function V(){return function(e,t){return new Promise(function(t,n){sdk.conn.getRoster({success:function(n){var a=n.filter(function(e){return"both"===e.subscription});e(Q(a)),t()},error:function(e){n()}})})}}var Y=n(32),Z=new(n.n(Y).a),ee=D("ADD_TEXT_MSG","to","message");function te(e,t){return function(n,a){var o;n(ee(e,t)),(o=t,function(e,t){var n=o.from,a=t().currentSession.allFriend.map(function(e){var t=Object(z.a)({},e);return t.name===n&&(t.newMsg=o),t});e(Q(a))})(n,a)}}n(54),a.Component,n(56);var ne,ae,oe,re,se=Object(p.b)(function(e){return{session:e.currentSession.session,msgList:e.message.msgList}},{addTextMsg:function(e,t,n){return function(a,o){var r=O().user.nickname,s=sdk.conn.getUniqueId(),i=new WebIM.message("txt",s);i.set({msg:t,to:e,roomType:!1,success:function(t,n){i.fromMe=!0,i.from=r,te(e,i)(a,o)},fail:function(e){alert("\u6d88\u606f\u5230\u670d\u52a1\u5668\u5931\u8d25")}}),i.body.chatType=n,sdk.conn.send(i.body)}}})(ne=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={message:"",aloneMessage:""},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.handleUserInput=function(t){e.setState({message:t.target.value})},this.sendMessage=function(){var t=e.props,n=t.addTextMsg,a=t.session,o=t.chatType,r=e.state.message;e.setState({message:""}),""!==e.state.message.trim()&&n(a.name,r,o)},this.getAloneMessage=function(){var t=e.props;return t.msgList[t.session.name]||[]}}},{key:"componentDidUpdate",value:function(){this.mainRef.scrollTop=this.mainRef.scrollHeight}},{key:"render",value:function(){var e=this,t=this.props.session,n=this.getAloneMessage();return o.a.createElement("div",{className:"bp"},o.a.createElement("div",{className:"bp_header"},t?t.name:""),o.a.createElement("div",{className:"bp_main",ref:function(t){e.mainRef=t}},o.a.createElement("div",{className:"timeHint"}),n.map(function(e){return o.a.createElement(ie,{key:e.id,msg:e})})),o.a.createElement("div",{className:"bp_footer"},o.a.createElement("textarea",{name:"",id:"",cols:"30",rows:"10",placeholder:"\u8f93\u5165\u6d88\u606f",className:"textArea",value:this.state.message,onChange:this.handleUserInput}),o.a.createElement("div",{className:"sendButton",onClick:this.sendMessage},"\u53d1\u9001")))}}]),t}(a.Component))||ne,ie=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={hasError:!1},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentDidCatch",value:function(e,t){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?o.a.createElement("div",null,"\u51fa\u9519\u4e86\uff0c\u8bf7\u8054\u7cfbRD\u4fee\u590d"):o.a.createElement(ce,{msg:this.props.msg})}}]),t}(a.Component),ce=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props.msg,t=!!e.fromMe,a=B()({mi_item:!0,you:!t,me:t});return o.a.createElement("div",{className:a},o.a.createElement("figure",{className:"mi_photo"},o.a.createElement("img",{src:n(25),alt:"\u5934\u50cf"})),o.a.createElement("p",{className:"mi_text"},e.value))}}]),t}(a.Component),le=n(20),ue=n.n(le),me=(n(58),Object(p.b)(function(e){return{allFriend:e.currentSession.allFriend}})(ae=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){Z.on("presence",this.handlePresence)}},{key:"componentWillUnmount",value:function(){Z.removeListener("presence",this.handlePresence)}},{key:"handlePresence",value:function(e){"subscribe"===e.type&&X.show({title:"\u597d\u53cb\u7533\u8bf7",content:o.a.createElement("div",null,o.a.createElement("div",null,e.from,"\u9080\u8bf7\u4f60\u52a0\u4e3a\u597d\u53cb"),o.a.createElement("div",null,"\u7559\u8a00\uff1a",e.status)),footer:o.a.createElement("div",null,o.a.createElement("button",{className:"reject",onClick:this.reject.bind(this,e)},"\u62d2\u7edd"),o.a.createElement("button",{className:"accept",onClick:this.accept.bind(this,e)},"\u540c\u610f"))})}},{key:"accept",value:function(e){sdk.conn.subscribed({to:e.from,message:"[resp:true]"}),sdk.conn.subscribe({to:e.from,message:"[resp:true]"}),X.close()}},{key:"reject",value:function(e){sdk.conn.unsubscribed({to:e.from,message:"rejectAddFriend"}),X.close()}},{key:"render",value:function(){var e=this.props,t=e.chatId,n=e.allFriend;return o.a.createElement("div",{className:"sessionList"},o.a.createElement("ul",null,0===n.length?null:n.map(function(e){var n=t===e.name;return o.a.createElement("li",{key:e.name,className:n?"list listActive":"list"},o.a.createElement(pe,{friend:e}))})))}}]),t}(a.Component))||ae),pe=Object(p.b)(function(){return{}},{currentSessionActon:$})(oe=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){var e=this;this.itemClick=function(){var t=e.props;(0,t.currentSessionActon)(t.friend)}}},{key:"shouldComponentUpdate",value:function(e,t){return!ue()(this.props.friend,e.friend)||!ue()(this.props.isSelected,e.isSelected)}},{key:"render",value:function(){var e=this.props.friend,t={pathname:"/chat/single/".concat(e.name),state:{chatType:"single",friendName:"".concat(e.name)}};return o.a.createElement("div",{className:"sessionItem"},o.a.createElement(k.a,{to:t,onClick:this.itemClick},o.a.createElement("div",{className:"sm_lf"},o.a.createElement("img",{src:n(25),alt:""})),o.a.createElement("div",{className:"sm_rt"},o.a.createElement("h3",null,e.name),o.a.createElement("p",null,e.newMsg?e.newMsg.value:""))))}}]),t}(a.Component))||oe,de=me,he=(n(60),Object(p.b)(function(){return{}},{init:function(){return function(e,t){sdk.conn.listen({onOpened:function(){e(V())},onTextMessage:function(n){console.log("\u6536\u5230\u4e00\u6761\u6d88\u606f"),n.value=n.value||n.data,te(n.from,n)(e,t)},onRoster:function(){e(V())},onPresence:function(e){Z.emit("presence",e)}})}}})(re=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentWillMount",value:function(){this.props.init()}},{key:"render",value:function(){var e=Object.assign({},this.props.location.state),t=e.chatType,n=e.friendName;return o.a.createElement("div",{className:"ctn-chat"},o.a.createElement(q,null),o.a.createElement(de,{chatType:t,chatId:n}),n?o.a.createElement(se,{chatType:t,chatId:n}):null)}}]),t}(a.Component))||re),fe=n(68),ve=n(67);n(62);window.sdk={conn:y};var ge=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=O();return o.a.createElement("div",null,e||"/login"===N.location.pathname?null:N.push("/login"))}}]),t}(a.Component),be=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return o.a.createElement(p.a,{store:b},o.a.createElement(fe.a,null,o.a.createElement("div",{className:"app_Wrapper"},o.a.createElement(ve.a,{path:"/",component:ge}),o.a.createElement(ve.a,{path:"/signUp",component:x}),o.a.createElement(ve.a,{path:"/login",component:A}),o.a.createElement(ve.a,{path:"/chat",component:he}))))}}]),t}(a.Component),Ee=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function Ne(e){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var t=e.installing;t.onstatechange=function(){"installed"===t.state&&(navigator.serviceWorker.controller?console.log("New content is available; please refresh."):console.log("Content is cached for offline use."))}}}).catch(function(e){console.error("Error during service worker registration:",e)})}s.a.render(o.a.createElement(be,null),document.getElementById("root")),function(){if("serviceWorker"in navigator){if(new URL("/WeChat-2018/build",window.location).origin!==window.location.origin)return;window.addEventListener("load",function(){var e="".concat("/WeChat-2018/build","/service-worker.js");Ee?function(e){fetch(e).then(function(t){404===t.status||-1===t.headers.get("content-type").indexOf("javascript")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):Ne(e)}).catch(function(){console.log("No internet connection found. App is running in offline mode.")})}(e):Ne(e)})}}()}},[[34,2,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,